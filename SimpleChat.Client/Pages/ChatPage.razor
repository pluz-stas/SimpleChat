@page "/chat/{chatId:int}"
@using SimpleChat.Shared.Contracts.Message
@using System.Text.Encodings.Web

@if (chat != null)
{
    <h2>@chat.Name</h2>
    <div class="form-group">
        <label>
            User:
            <input @bind="userInput"/>
        </label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50"/>
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    <hr>

    <button @onclick="GetHistoryMessages">get</button>

    <div class="messagesWrapper" style="height: 200px; overflow: scroll">
        @for (var i = 0; i < messages.Count; i++)
        {
            var message = messages[i];
            var previousMessage = i > 0 ? messages[i - 1] : null;
            var uid = message.User.UserId;
            
            bool isCurrentUserMessage = false;
            bool isDateSplit = false;
            
            if (uid != null)
            {
                var previousMessageUid = previousMessage?.User.UserId;
                var nextMessageUid = i + 1 < messages.Count ? messages[i + 1].User.UserId : null;

                if (uid == UserId)
                    isCurrentUserMessage = true;

                if (uid == previousMessageUid)
                    message.User.UserName = null;

                if (uid == nextMessageUid)
                    message.User.UserImg = null;
            }
            if (previousMessage?.CreatedDate != null && message.CreatedDate != null)
            {
                isDateSplit = previousMessage.CreatedDate.Value.ToLocalTime().Day != message.CreatedDate.Value.ToLocalTime().Day ? true : false;
            }
            <div class=@(isDateSplit ? "dateSplit": "d-none")>
                @message.CreatedDate.Value.ToShortDateString()
            </div>
            <div class="messageRow">
                <div class="messageUserAvatar">@message.User.UserImg</div>
                <div class=@(isCurrentUserMessage ? "imMessageWrap" : "smbdMessageWrap")>
                    <div class="textColumn">
                        <div class="messageUserName">@message.User.UserName</div >
                        <div class="messageContent">@message.Content</div>
                    </div>
                    <div class="messageMeta">@message.CreatedDate.Value.ToLocalTime().ToShortTimeString()</div>
                </div>
            </div>
        }
    </div>
}
@{
    void RenderMessage(MessageContract message, bool isCurrentUserMessage)
    {
    }
}